import pathlib

import numpy as np
import pytest

from typycal_periods.clustering.selection import NotEvaluatedError
from typycal_periods.clustering.selection import TypicalPeriodsSelection
from typycal_periods.tp_types.data_classes import PerformanceIndicators
from typycal_periods.tp_types.data_classes import PerformanceMeasures
from typycal_periods.tp_types.data_classes import TypicalPeriodsSelectionConfig
from typycal_periods.tp_types.time_series import TimeSeriesObservations


def test_tp_selection_keys(observations):
    tps = TypicalPeriodsSelection(observations, 4)
    assert tuple(tps._typical_periods_clustering) == (
        1,
        2,
        3,
        4,
    )


def test_tp_selection_fit(observations):
    tps = TypicalPeriodsSelection(observations, 4)
    tps.fit()
    assert all([clustering._is_clustered for _, clustering in tps._typical_periods_clustering.items()])


@pytest.mark.filterwarnings("ignore::RuntimeWarning")  # Because of 0 division
def test_tp_selection_evaluate(observations):
    tps = TypicalPeriodsSelection(observations, 4)
    tps.fit()
    tps.evaluate()
    assert all(
        [
            isinstance(clustering.measures, PerformanceMeasures)
            for _, clustering in tps._typical_periods_clustering.items()
        ]
    )
    assert all(
        [
            isinstance(clustering.indicators, PerformanceIndicators)
            for _, clustering in tps._typical_periods_clustering.items()
        ]
    )
    assert tuple(tps._ranking.values()) == (4, 3, 3, 4)


@pytest.mark.slow
def test_large_observation():
    measurement_path = pathlib.Path(__file__).parent.joinpath("res/test_measurement.npy")
    observations = TimeSeriesObservations(np.load(str(measurement_path)))

    td = TypicalPeriodsSelection(observations, 20, TypicalPeriodsSelectionConfig(gamma=0.07, pareto_error=0.2))
    td.fit()
    td.evaluate()

    assert tuple(td._ranking.values()) == (
        20.0,
        20.0,
        18.0,
        17.0,
        16.0,
        15.0,
        14.0,
        17.0,
        13.0,
        11.0,
        16.0,
        12.0,
        10.0,
        14.0,
        17.0,
        15.0,
        12.0,
        18.0,
        19.0,
        18.0,
    )
    assert td.n_min == 9
    assert td.n_opt == 13

    assert all(
        td.typical_periods_result(13).labels
        == np.array(
            (
                11,
                4,
                4,
                4,
                9,
                9,
                4,
                4,
                12,
                12,
                12,
                12,
                12,
                6,
                1,
                12,
                12,
                12,
                12,
                12,
                4,
                4,
                12,
                0,
                0,
                0,
                12,
                4,
                4,
                12,
                0,
                0,
                0,
                0,
                3,
                10,
                12,
                12,
                12,
                12,
                12,
                3,
                4,
                12,
                12,
                12,
                12,
                5,
                6,
                1,
                5,
                12,
                12,
                12,
                5,
                10,
                1,
                5,
                3,
                8,
                5,
                5,
                10,
                1,
                5,
                5,
                5,
                5,
                5,
                6,
                1,
                5,
                5,
                5,
                9,
                4,
                6,
                1,
                5,
                5,
                5,
                5,
                5,
                6,
                1,
                5,
                5,
                5,
                5,
                5,
                6,
                1,
                5,
                5,
                5,
                5,
                9,
                6,
                1,
                5,
                5,
                5,
                5,
                6,
                11,
                11,
                11,
                5,
                5,
                5,
                5,
                6,
                1,
                5,
                5,
                5,
                5,
                5,
                4,
                4,
                6,
                5,
                5,
                5,
                5,
                10,
                1,
                12,
                12,
                12,
                12,
                12,
                10,
                1,
                12,
                12,
                0,
                0,
                12,
                3,
                1,
                7,
                0,
                0,
                4,
                12,
                3,
                4,
                12,
                12,
                0,
                0,
                12,
                3,
                1,
                4,
                7,
                7,
                7,
                7,
                3,
                1,
                7,
                7,
                0,
                6,
                4,
                6,
                1,
                7,
                0,
                0,
                0,
                0,
                3,
                1,
                0,
                0,
                2,
                0,
                0,
                3,
                1,
                0,
                0,
                0,
                0,
                0,
                3,
                1,
                12,
                0,
                0,
                12,
                5,
                6,
                1,
                10,
                10,
                10,
                10,
                10,
                11,
                11,
                10,
                10,
                10,
                10,
                10,
                11,
                11,
                10,
                10,
                10,
                9,
                9,
                1,
                1,
                2,
                7,
                7,
                7,
                5,
                1,
                11,
                7,
                0,
                0,
                0,
                0,
                3,
                1,
                7,
                7,
                0,
                7,
                7,
                3,
                1,
                7,
                0,
                0,
                0,
                2,
                6,
                1,
                7,
                0,
                7,
                7,
                7,
                3,
                1,
                7,
                7,
                7,
                7,
                7,
                3,
                1,
                7,
                7,
                7,
                7,
                7,
                3,
                1,
                7,
                7,
                7,
                7,
                0,
                6,
                1,
                4,
                1,
                12,
                12,
                5,
                6,
                1,
                12,
                12,
                5,
                12,
                12,
                6,
                1,
                12,
                12,
                12,
                12,
                5,
                6,
                1,
                12,
                12,
                12,
                12,
                5,
                6,
                11,
                4,
                6,
                5,
                12,
                5,
                6,
                11,
                12,
                12,
                5,
                5,
                5,
                11,
                11,
                5,
                5,
                5,
                2,
                5,
                11,
                11,
                5,
                5,
                5,
                5,
                5,
                11,
                11,
                5,
                5,
                5,
                5,
                5,
                11,
                11,
                5,
                5,
                5,
                5,
                5,
                11,
                11,
                5,
                5,
                5,
                5,
                9,
                11,
                11,
                4,
                10,
                1,
                11,
                11,
                11,
                11,
                11,
                11,
                11,
                11,
                11,
                11,
            )
        )
    )


@pytest.mark.filterwarnings("ignore::RuntimeWarning")  # Because of 0 division
def test_tp_selection_get_tp(observations):
    tps = TypicalPeriodsSelection(observations, 4)
    tps.fit()
    tps.evaluate()

    assert tps.typical_periods_result(4) == tps._typical_periods_clustering[4]
    assert tps.typical_periods(2) == tps._typical_periods_clustering[2].typical_periods


@pytest.mark.xfail(raises=NotEvaluatedError)
def test_tp_selection_get_before_eval(observations):
    tps = TypicalPeriodsSelection(observations, 4)
    tps.fit()
    _ = tps.n_opt


@pytest.mark.xfail(raises=NotEvaluatedError)
def test_tp_selection_get_before_eval_2(observations):
    tps = TypicalPeriodsSelection(observations, 4)
    tps.fit()
    _ = tps.n_min
